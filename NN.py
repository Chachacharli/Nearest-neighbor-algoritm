# -*- coding: utf-8 -*-
"""Vecino mas cercano2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_-XR8eio2wTVSUtES4Bu1VQwzQbVW7M6
"""

from numpy import genfromtxt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import csv
from math import sqrt


def crearDiccionario(n):
  for i in range(n):
    for j in range(n):
      if (i !=j): 
       distancias[(i,j)] = []
       distanciaInterna[(i,j)] = []


  

nodos = 0
data = csv.reader(open('5nodes.csv', 'rt'), delimiter=",", quotechar='|')
X, Y = [], []
arcos = []
coordenadas = [None]*(5)
distanciaInterna = {}

for row in data:
    X.append(int(row[1]))
    Y.append(int(row[2]))
    nodos +=1

for i in range(nodos):
  for j in range(nodos):
    if (i != j):
     arcos.append((i,j))

distancias = {}
distanciaTotal=0


crearDiccionario(nodos)

for i in range(nodos):
  for j in range(nodos):
    if (i !=j):
      distancias[i,j] = sqrt((X[i]-X[j])**2 + (Y[i]-Y[j])**2 )

iteracion = 0
inicio = 3
recorrido = [inicio] 

while(len(recorrido)<nodos):
    i = recorrido[-1]
    distanciaInterna = { (i,j): distancias[ (i,j) ] for j in range(nodos) if i!=j and j not in recorrido }
     
    nodo = min(distanciaInterna.items(), key = lambda x:x[1])
    recorrido.append(nodo[0][1])

recorrido.append(inicio)

 

while(iteracion < len(recorrido)-1):
  for i in range(len(recorrido)-1):
    distanciaTotal += distancias[(recorrido[i],recorrido[i+1])]
    iteracion+=1


for i in range(len(recorrido)-1):

    coordenadas[i] =  (X[i], Y[i])

print("La Distancia total es: " + str(distanciaTotal))
print("El recorrido es: " + str(recorrido))

for i in range(len(recorrido)):
  print(" {} :con coordenadas en: {} ".format(recorrido[i],coordenadas[recorrido[i]]))
  
plt.figure(figsize=(12,6))
plt.scatter(X,Y,color='blue')

for n in range(len(recorrido)-1):
    plt.plot([X[recorrido[n]],X[recorrido[n+1]]],
             [Y[recorrido[n]],Y[recorrido[n+1]]], color = 'red')
    
plt.xlabel('CORD X')
plt.xlabel('CORD Y')

plt.show()

def crearDiccionario(n):
  for i in range(n):
    for j in range(n):
      if (i !=j): 
       distancias[(i,j)] = []
       nn[(i,j)] = []


  
iteracion = 0
nodos = 0
data = csv.reader(open('48nodes.csv', 'rt'), delimiter=",", quotechar='|')
X, Y = [], []
arcos = []
coordenadas = [None]*(48)
nn = {}

for row in data:
    X.append(int(row[1]))
    Y.append(int(row[2]))
    nodos +=1

for i in range(nodos):
  for j in range(nodos):
    if (i != j):
     arcos.append((i,j))

distancias = {}

crearDiccionario(nodos)

for i in range(nodos):
  for j in range(nodos):
    if (i !=j):
      distancias[i,j] = sqrt((X[i]-X[j])**2 + (Y[i]-Y[j])**2 )

inicio = 3
recorrido = [inicio] 

while(len(recorrido)<nodos):
    k = recorrido[-1]
    nn = { (k,j): distancias[ (k,j) ] for j in range(nodos) if k!=j and j not in recorrido }

    new = min(nn.items(), key = lambda x:x[1])
    recorrido.append(new[0][1])

recorrido.append(inicio)


while(iteracion < len(recorrido)-1):
  for i in range(len(recorrido)-1):
    distanciaTotal += distancias[(recorrido[i],recorrido[i+1])]
    iteracion+=1


for i in range(len(recorrido)-1):
    coordenadas[i] =  (X[i], Y[i])

print("La Distancia total es: " + str(distanciaTotal))
print("El recorrido es: " + str(recorrido))

for i in range(len(recorrido)):
  print(" {} :con coordenadas en: {} ".format(recorrido[i],coordenadas[recorrido[i]]))

plt.figure(figsize=(12,6))
plt.scatter(X,Y,color='blue')

for n in range(len(recorrido)-1):
    plt.plot([X[recorrido[n]],X[recorrido[n+1]]],
             [Y[recorrido[n]],Y[recorrido[n+1]]], color = 'red')
    
plt.xlabel('CORD X')
plt.xlabel('CORD Y')

plt.show()

def crearDiccionario(n):
  for i in range(n):
    for j in range(n):
      if (i !=j): 
       distancias[(i,j)] = []
       nn[(i,j)] = []


  

nodos = 0
data = csv.reader(open('101nodes.csv', 'rt'), delimiter=",", quotechar='|')
X, Y = [], []
arcos = []
coordenadas = [None]*(len(recorrido)-1)
nn = {}

for row in data:
    X.append(int(row[1]))
    Y.append(int(row[2]))
    nodos +=1

for i in range(nodos):
  for j in range(nodos):
    if (i != j):
     arcos.append((i,j))

distancias = {}

crearDiccionario(nodos)

for i in range(nodos):
  for j in range(nodos):
    if (i !=j):
      distancias[i,j] = sqrt((X[i]-X[j])**2 + (Y[i]-Y[j])**2 )


inicio = 3
recorrido = [inicio] 

while(len(recorrido)<nodos):
    k = recorrido[-1]
    nn = { (k,j): distancias[ (k,j) ] for j in range(nodos) if k!=j and j not in recorrido }

    new = min(nn.items(), key = lambda x:x[1])
    recorrido.append(new[0][1])

recorrido.append(inicio)



while(iteracion < len(recorrido)-1):
  for i in range(len(recorrido)-1):
    distanciaTotal += distancias[(recorrido[i],recorrido[i+1])]
    iteracion+=1

for i in range(len(recorrido)-2):
    coordenadas[i] = ( (X[i], Y[i]))

print("La Distancia total es: " + str(distanciaTotal))
print("El recorrido es: " + str(recorrido))

for i in range(len(recorrido)):
  print(" {} :con coordenadas en: {} ".format(recorrido[i],coordenadas[recorrido[i]]))

plt.figure(figsize=(12,6))
plt.scatter(X,Y,color='blue')

for n in range(len(recorrido)-1):
    plt.plot([X[recorrido[n]],X[recorrido[n+1]]],
             [Y[recorrido[n]],Y[recorrido[n+1]]], color = 'red')
    
plt.xlabel('CORD X')
plt.xlabel('CORD Y')

plt.show()

